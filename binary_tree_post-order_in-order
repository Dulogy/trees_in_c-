#include <iostream>
#include <queue>
using namespace std;
template <typename T>
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};

BinaryTreeNode<int>* takeInput() {
    int rootData;
    //cout << "Enter root data : ";
    cin >> rootData;
    if(rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        BinaryTreeNode<int> *currentNode = q.front();
	q.pop();
        int leftChild, rightChild;
        //cout << "Enter left child of " << currentNode -> data << " : ";
        cin >> leftChild;
        if(leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode -> left =leftNode;
            q.push(leftNode);
        }
        //cout << "Enter right child of " << currentNode -> data << " : ";
        cin >> rightChild;
        if(rightChild != -1) {
            BinaryTreeNode<int>* rightNode = new BinaryTreeNode<int>(rightChild);
            currentNode -> right =rightNode;
            q.push(rightNode);
        }
    }
    return root;
}

void printLevelATNewLine(BinaryTreeNode<int> *root) {
		queue<BinaryTreeNode<int>*> q;
		q.push(root);
		q.push(NULL);
		while(!q.empty()) {
			BinaryTreeNode<int> *first = q.front();
			q.pop();
			if(first == NULL) {
				if(q.empty()) {
					break;
				}
				cout << endl;
				q.push(NULL);
				continue;
			}
			cout << first -> data << " ";
			if(first -> left != NULL) {
				q.push(first -> left);
			}
			if(first -> right != NULL) {
				q.push(first -> right);
			}
		}
}

BinaryTreeNode<int>*getTreeFromPostorderAndInorder(int *post,int ps, int pe,int *in,int is,int ie){
    if(ps > pe || is > ie){
        return NULL ;
    }
    int val = post[pe] ;
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(val) ;
    int k = 0 ;
    for(int i = is; i <= ie; i++){
        if(val == in[i]){
            k = i ;
            break ;
        }
    }
    root -> left  = getTreeFromPostorderAndInorder(post,ps,ps+k-is-1,in,is,k - 1) ;
    root -> right = getTreeFromPostorderAndInorder(post,ps+k-is,pe-1,in,k + 1,ie)     ;
    return root;
}
BinaryTreeNode<int>*getTreeFromPostorderAndInorder(int *preOrder,int preLength,int *inOrder,int inLength){
int preStart = 0 ;
int preEnd   = preLength - 1 ;
int inStart  = 0 ;
int inEnd    = inLength - 1  ;
return getTreeFromPostorderAndInorder(preOrder,preStart,preEnd,inOrder,inStart,inEnd) ;
}
int main() {
    int size;
    cin >> size;
    int *post = new int[size];
    int *in = new int[size];
    for(int i=0;i<size;i++)
		cin>>post[i];
    for(int i=0;i<size;i++)
		cin>>in[i];
    BinaryTreeNode<int>* root = getTreeFromPostorderAndInorder(post, size, in, size);
    printLevelATNewLine(root);
}
