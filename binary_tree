// binary_tree

// not a good approach

#include<iostream>
using namespace std ;
template<typename T>
class binaryTreeNode{
    public: 
    T data ;
    binaryTreeNode* left  ;
    binaryTreeNode* right ;

    binaryTreeNode(T data){
       this -> data = data ;
       left = NULL  ;
       right = NULL ; 
    }
    ~binaryTreeNode(){
        delete left  ;
        delete right ;
    }

};

void printTree(binaryTreeNode<int>*root){
    if(root == NULL){
        return ;
    }
    cout << root -> data <<":" ;
    if(root -> left != NULL){
        cout << "l" << root -> left -> data <<" " ;
    }
    if(root -> right != NULL){
        cout << "r" << root -> right -> data ;
    }
    cout << "\n"     ;
    printTree(root -> left)  ;
    printTree(root -> right) ;

}

binaryTreeNode<int>* takeInput(){
    int rootData ;
    cout << "enter  data:" << "\n" ;
    cin >> rootData ;
    if(rootData == -1){
        return NULL;
    }
    binaryTreeNode<int>* root       = new binaryTreeNode<int>(rootData) ;
    binaryTreeNode<int>* leftchild  = takeInput() ;
    binaryTreeNode<int>* rightchild = takeInput() ;
    root -> left  = leftchild ;
    root -> right = rightchild ;
    return root ;
}
int main(){
/*binaryTreeNode<int>* root  = new binaryTreeNode<int>(1) ;
binaryTreeNode<int>* node1 = new binaryTreeNode<int>(2) ;
binaryTreeNode<int>* node2 = new binaryTreeNode<int>(3) ;
root -> left  = node1 ;
root -> right = node2 ;*/
binaryTreeNode<int>* root = takeInput() ;
printTree(root) ;
delete root ;
}
