#include<iostream>
#include<vector>
#include<queue>
using namespace std;
template<typename T>
class treeNode{
    public :
    T data ;
    vector<treeNode<int>*>children ;
    treeNode(T data){
        this -> data = data ;
    }
    ~treeNode(){
    for(int i = 0; i < children.size(); i++){
    delete children[i] ;
    }
};

treeNode<int>*takeInputLevelWise(){
    int rootData ;
    cout << "enter root data ;" ;
    cin >> rootData ;
    treeNode<int>*root = new treeNode<int>(rootData) ;

    queue<treeNode<int>*>pendingNodes ;
    pendingNodes.push(root) ;
    while(pendingNodes.size() != 0){
        treeNode<int>*front = pendingNodes.front() ;
        pendingNodes.pop() ;
        int numchild ;
        cout << "enter no. of child of " << front -> data << "\n" ;
        cin >> numchild ;
        for(int i = 0; i < numchild; i++){
            int chilData ;
            cout << "enter " << i << "th child of" << front -> data << "\n" ;
            cin >> chilData ;
            treeNode<int>* child = new treeNode<int>(chilData) ;
            front -> children.push_back(child) ;
            pendingNodes.push(child) ;
        }
    }
        return root ;
}

 void printLevelWise(treeNode<int>* root){
    if(root==NULL)
        return;
    queue<treeNode<int>*>pendingnodes;
	pendingnodes.push(root);
    while(pendingnodes.size()!=0){
	treeNode<int>*front=pendingnodes.front();
        pendingnodes.pop();
        cout<<front->data<<":";
        for(int i=0;i<front->children.size(); i++){
            cout<<front->children[i]->data;
            if(i<front->children.size()-1){
                cout<<",";
            }
            pendingnodes.push(front->children[i]);
        }
            cout<<endl;
    }
 }
int countNodes(treeNode<int>*root){
    int ans = 1 ;
    for(int i = 0; i < root -> children.size(); i++ ){
        ans = ans + countNodes(root -> children[i]) ;
    }
    return ans ;
}

int main(){
    treeNode<int>* root = takeInputLevelWise() ;
    printLevelWise(root) ;
    cout << "total nodes are : " << countNodes(root) << "\n" ;
    delete root ;
}
