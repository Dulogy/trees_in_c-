// all_about_tree

#include<iostream>
#include<vector>
#include<queue>
using namespace std;
template<typename T>
class treeNode{
    public :
    T data ;
    vector<treeNode<int>*>children ;
    treeNode(T data){
        this -> data = data ;
    }
    ~treeNode(){
        for(int i = 0; i < children.size(); i++){
            delete children[i] ;
        }
    }
};

treeNode<int>*takeInputLevelWise(){
    int rootData ;
    cout << "enter root data ;" ;
    cin >> rootData ;
    treeNode<int>*root = new treeNode<int>(rootData) ;

    queue<treeNode<int>*>pendingNodes ;
    pendingNodes.push(root) ;
    while(pendingNodes.size() != 0){
        treeNode<int>*front = pendingNodes.front() ;
        pendingNodes.pop() ;
        int numchild ;
        cout << "enter no. of child of " << front -> data << "\n" ;
        cin >> numchild ;
        for(int i = 0; i < numchild; i++){
            int chilData ;
            cout << "enter " << i << "th child of" << front -> data << "\n" ;
            cin >> chilData ;
            treeNode<int>* child = new treeNode<int>(chilData) ;
            front -> children.push_back(child) ;
            pendingNodes.push(child) ;
        }
    }
        return root ;
}

   /* void printTree(treeNode<int>*root){
    if(root == NULL){
        return ;
    }
    cout << root -> data <<" :";
    for(int i = 0; i < root -> children.size(); i++){
        cout << root -> children[i] -> data <<" ," ;
    }
    cout << endl;
    for(int i = 0; i < root -> children.size(); i++){
        printTree(root -> children[i]) ;
    }
}*/

 void printLevelWise(treeNode<int>* root){
    if(root==NULL)
        return;
    queue<treeNode<int>*>pendingnodes;
	pendingnodes.push(root);
    while(pendingnodes.size()!=0){
	treeNode<int>*front=pendingnodes.front();
        pendingnodes.pop();
        cout<<front->data<<":";
        for(int i=0;i<front->children.size(); i++){
            cout<<front->children[i]->data;
            if(i<front->children.size()-1){
                cout<<",";
            }
            pendingnodes.push(front->children[i]);
        }
            cout<<endl;
    }
 }
int countNodes(treeNode<int>*root){
    int ans = 1 ;
    for(int i = 0; i < root -> children.size(); i++ ){
        ans = ans + countNodes(root -> children[i]) ;
    }
    return ans ;
}

treeNode<int>*maxNode(treeNode<int>*root){
    if(root -> children.size() == 0){
        return root ;
    }
    treeNode<int>*max = root ;
    for(int i = 0; i < root -> children.size(); i++){
        treeNode<int>*temp = maxNode(root -> children[i]) ;
        if(temp -> data > max -> data)
        max = temp ;
    }
    return max ;
}
int sumofnodes(treeNode<int>*root){
    int ans = root -> data ;
    for(int i = 0; i < root -> children.size(); i++){
        ans = ans + sumofnodes(root -> children[i]) ;
    }
    return ans ;
}

int heightTree(treeNode<int>*root){
    if(root == NULL)
    return 0 ;
    int max = 0 ;
    for(int i = 0; i < root -> children.size(); i++){
        int ans = heightTree(root -> children[i]) ;
        if(max < ans)
        max = ans ;
    }
    return max + 1 ;
}
void printLevelK(treeNode<int>*root , int  k){
    if(root == NULL){
        return ;
    }

    if(k == 0){
        cout << root -> data ;
        return ;
    }

    for( int i = 0; i < root -> children.size(); i++){
        printLevelK(root -> children[i], k-1) ;
    }
}
int leafnum(treeNode<int>*root){
    int num = 0 ;
    if(root == NULL){
        return 0 ;
    }
    if(root -> children.size() == 0){
        return 1 ;
    }
    for(int i = 0; i < root -> children.size(); i++){
        num = num + leafnum(root -> children[i]) ;
    }
    return num  ;
}

void preorder(treeNode<int>*root){
    if(root == NULL){
        return ;
    }
    cout << root -> data << " " ;
    for(int i = 0; i < root -> children.size(); i++){
        preorder(root -> children[i]) ;
    }
}

void postorder(treeNode<int>*root){
    if(root == NULL){
        return ;
    }
    
    for(int i = 0; i < root -> children.size(); i++){
        postorder(root -> children[i]) ;
    }
    cout << root -> data <<" " ;
}

void deleteTree(treeNode<int>*root){
    for(int i = 0; i < root -> children.size(); i++ ){
        deleteTree(root -> children[i]) ;
    }
    delete root ;
}
int main(){
    treeNode<int>* root = takeInputLevelWise() ;
    // printTree(root) ;
    printLevelWise(root) ;
    cout << "total nodes are : " << countNodes(root) << "\n" ;
    treeNode<int>* max = maxNode(root);
    if(root != NULL) {
       	cout << max -> data << "  is maximum among all nodes " << "\n";
    }
    cout << "sum of nodes      :" << sumofnodes(root) << "\n" ;
    cout << "height of tree    :" << heightTree(root) <<"\n" ;
    cout << "print at level k  :" << printLevelK(root,2) << " \n" ;
    cout << "no. of leaf nodes :" << leafnum(root) << "\n" ;
    preorder(root) ;
    postorder(root) ;
    deleteTree(root) ; // we can use it also as
    delete root ;
}
