/*input
12
1 2 3 4 15 5 6 7 8 10 9 12
4 15 3 2 5 1 6 10 8 7 9 12*/
/*output
1 
2 6 
3 5 7 
4 8 9 
15 10 12
*/
// make binary tree from preorder & inorder

#include<iostream>
#include<queue>
using namespace std ;
template<typename T>
class binaryTreeNode{
    public: 
    T data ;
    binaryTreeNode* left  ;
    binaryTreeNode* right ;

    binaryTreeNode(T data){
       this -> data = data ;
       left = NULL  ;
       right = NULL ; 
    }
    ~binaryTreeNode(){
        delete left  ;
        delete right ;
    }

};

binaryTreeNode<int>*preOrderIorderTree(int *preOrder,int preStart, int preEnd,int *inOrder,int inStart,int inEnd){
    if(preStart > preEnd || inStart > inEnd){
        return NULL ;
    }
    int val = preOrder[preStart] ;
    binaryTreeNode<int>* root = new binaryTreeNode<int>(val) ;
    int k = 0 ;
    for(int i = inStart; i <= inEnd; i++){
        if(val == inOrder[i]){
            k = i ;
            break ;
        }
    }
    root -> left  = preOrderIorderTree(preOrder,preStart + 1,preStart + (k - inStart),inOrder,inStart,k - 1) ;
    root -> right = preOrderIorderTree(preOrder,preStart + (k - inStart) + 1,preEnd,inOrder,k + 1,inEnd)     ;
    return root;
}
binaryTreeNode<int>*preOrderIorderTree(int *preOrder,int preLength,int *inOrder,int inLength){
int preStart = 0 ;
int preEnd   = preLength - 1 ;
int inStart  = 0 ;
int inEnd    = inLength - 1  ;
return preOrderIorderTree(preOrder,preStart,preEnd,inOrder,inStart,inEnd) ;
}

void printLevelATNewLine(binaryTreeNode<int> *root) {
		queue<binaryTreeNode<int>*> q;
		q.push(root);
		q.push(NULL);
		while(!q.empty()) {
			binaryTreeNode<int> *first = q.front();
			q.pop();
			if(first == NULL) {
				if(q.empty()) {
					break;
				}
				cout << endl;
				q.push(NULL);
				continue;
			}
			cout << first -> data << " ";
			if(first -> left != NULL) {
				q.push(first -> left);
			}
			if(first -> right != NULL) {
				q.push(first -> right);
			}
		}
}

int main(){
int size ;
cin >> size  ;
int *pre = new int[size] ;
int *in  = new int[size] ;
for(int i=0;i<size;i++)
	cin >> pre[i] ;
for(int i=0;i<size;i++)
	cin >> in[i];
binaryTreeNode<int>*root = preOrderIorderTree(pre,size,in,size) ;
printLevelATNewLine(root) ;

delete root ;
}
